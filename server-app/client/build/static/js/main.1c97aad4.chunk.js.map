{"version":3,"sources":["Item.jsx","ItemsList.jsx","SelectedItems.js","App.jsx","reportWebVitals.js","index.js"],"names":["Item","item","updateItem","type","checked","id","name","onChange","for","ItemsList","items","console","log","filteredItems","filter","map","index","SelectedItems","itemsSelected","dotenv","config","API_HOST","process","API_GROCERY_ITEMS_ROUTE","App","props","useState","setItems","useEffect","axios","get","then","response","data","parsedData","itemName","prevState","newItem","length","className","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c97aad4.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nfunction Item({ item, updateItem }) {\n  const handleChange = () => updateItem(item.name);\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={item.checked}\n        id={item.name}\n        name={item.name}\n        onChange={handleChange}\n      />\n      <label for={item.name}>{item.name}</label>\n    </div>\n  );\n}\n\nItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  updateItem: PropTypes.func.isRequired,\n};\n\nexport default Item;\n","import PropTypes from \"prop-types\";\n\n// src imports\nimport Item from \"./Item\";\n\nfunction ItemsList({ items, type, updateItem }) {\n  console.log(items);\n  console.log(type);\n\n  const filteredItems = items.filter((item) => item.type === type);\n  console.log(filteredItems);\n\n  return (\n    <div>\n      {type} List\n      <ul>\n        {filteredItems.map((item, index) => (\n          <div key={type + \"-\" + index}>\n            <Item item={item} updateItem={updateItem} />\n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nItemsList.propTypes = {\n  items: PropTypes.array.isRequired,\n  type: PropTypes.string.isRequired,\n  updateItem: PropTypes.func.isRequired,\n};\n\nexport default ItemsList;\n","import PropTypes from \"prop-types\";\n\nfunction SelectedItems({ items }) {\n  const itemsSelected = items.filter(item => item.checked === true);\n\n  return (\n    <ul>\n     {itemsSelected.map(item => <li>{item.name}</li>)}\n    </ul>\n  )\n\n}\n\nSelectedItems.propTypes = {\n  items: PropTypes.array.isRequired,\n};\n\n\nexport default SelectedItems;","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\n\n// Source code imports\nimport ItemsList from \"./ItemsList\";\nimport SelectedItems from \"./SelectedItems\";\n\n// Get env vars from .env file\ndotenv.config();\n\n// Our raw data. In a real app we might get this via an API call instead of it being hardcoded.\nconst TYPE_NAMES = {\n  fruits: \"fruit\",\n  vegetables: \"vegetable\",\n};\n\nconst API_HOST = process.env.REACT_APP_API_HOST;\nconsole.log(\"API_HOST \", API_HOST);\n\nconst API_GROCERY_ITEMS_ROUTE = `${API_HOST}/grocery-items`;\n\nfunction App(props) {\n  // create the react component state we'll use to store our data\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(API_GROCERY_ITEMS_ROUTE)\n      // handle success\n      .then((response) => {\n        const data = response.data;\n        console.log(data);\n\n        const parsedData = data.map((item) => ({ ...item, checked: false }));\n\n        // set our react state w/data from the server!\n        setItems(parsedData);\n      });\n  }, []);\n\n  const updateItem = (itemName) => {\n    console.log(\"updateItem for \", itemName);\n    // Go thru all items; change the desired one; return a new array which has our updated item and all the other items.\n    setItems((prevState) => {\n      return prevState.map((item) => {\n        console.log(item);\n\n        // If it's the desired item, flip the value of `item.checked`\n        if (itemName === item.name) {\n          console.log(\"desired item \", item);\n\n          // This could also be done as `return { ...item, checked: !item.checked }`\n          const newItem = {\n            name: item.name,\n            type: item.type,\n            checked: !item.checked,\n          };\n\n          console.log(\"updated item \", newItem);\n          return newItem;\n        }\n\n        // If it's not the desired item, return it unchanged\n        return { ...item }; // IMPORTANT: Object destructuring like this creates a **new** object w/the same values\n      });\n    });\n  };\n\n  console.log(\"App.state.items is \", items);\n\n  // Data being retrieved from server\n  if (!items.length) {\n    return <div>Loading</div>;\n  } else {\n    return (\n      <Router>\n        <div className=\"App\">\n          <h1>Grocery List App</h1>\n          <div>\n            <Link to=\"/\">Selected Items</Link>\n          </div>\n          <div>\n            <Link to=\"fruit\">Fruits</Link>\n          </div>\n          <div>\n            <Link to=\"vegetable\">Vegetables</Link>\n          </div>\n        </div>\n        <Switch>\n          <Route path=\"/fruit\">\n            <ItemsList items={items} type=\"fruit\" updateItem={updateItem} />\n          </Route>\n          <Route path=\"/vegetable\">\n            <ItemsList items={items} type=\"vegetable\" updateItem={updateItem} />\n          </Route>\n          <Route path=\"/\">\n            <SelectedItems items={items} />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}